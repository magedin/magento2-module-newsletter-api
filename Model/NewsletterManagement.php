<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2024 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

namespace MagedIn\NewsletterApi\Model;

use Exception;
use Laminas\Validator\EmailAddress as EmailAddressValidator;
use MagedIn\NewsletterApi\Api\Data\NewsletterSubscriptionInterface;
use MagedIn\NewsletterApi\Api\Data\OperationStatusInterface;
use MagedIn\NewsletterApi\Api\Data\OperationStatusInterfaceFactory;
use Magento\Customer\Api\AccountManagementInterface as CustomerAccountManagement;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Newsletter\Model\ResourceModel\Subscriber as SubscriberResource;
use Magento\Newsletter\Model\Subscriber;
use Magento\Newsletter\Model\SubscriberFactory;
use Magento\Newsletter\Model\SubscriptionManager;
use Magento\Store\Model\ScopeInterface;
use MagedIn\NewsletterApi\Api\Data\NewsletterSubscriptionInterfaceFactory;
use MagedIn\NewsletterApi\Api\NewsletterManagementInterface;

/**
 * Class NewsletterManagement
 *
 * Newsletter Management for guest and customer
 */
class NewsletterManagement implements NewsletterManagementInterface
{
    /**
     * @var SubscriberFactory
     */
    private SubscriberFactory $subscriberFactory;

    /**
     * @var CustomerAccountManagement
     */
    private CustomerAccountManagement $customerAccountManagement;

    /**
     * @var ScopeConfigInterface
     */
    private ScopeConfigInterface $scopeConfig;

    /**
     * @var NewsletterSubscriptionInterfaceFactory
     */
    private NewsletterSubscriptionInterfaceFactory $newsletterSubscriptionFactory;

    /**
     * @var SubscriptionManager
     */
    private SubscriptionManager $subscriptionManager;

    /**
     * @var SubscriberResource
     */
    private SubscriberResource $subscriberResource;

    /**
     * @var StoreResolver
     */
    private StoreResolver $storeResolver;

    /**
     * @var EmailAddressValidator
     */
    private EmailAddressValidator $emailAddressValidator;

    /**
     * @var OperationStatusInterfaceFactory
     */
    private OperationStatusInterfaceFactory $operationStatusFactory;

    /**
     * @var CustomerRepositoryInterface
     */
    private CustomerRepositoryInterface $customerRepository;

    /**
     * NewsletterManagement constructor.
     *
     * @param SubscriberFactory $subscriberFactory
     * @param ScopeConfigInterface $scopeConfig
     * @param CustomerAccountManagement $customerAccountManagement
     * @param NewsletterSubscriptionInterfaceFactory $newsletterSubscriptionFactory
     * @param SubscriptionManager $subscriptionManager
     * @param SubscriberResource $subscriberResource
     * @param StoreResolver $storeResolver
     * @param EmailAddressValidator $emailAddressValidator
     * @param OperationStatusInterfaceFactory $operationStatusFactory
     * @param CustomerRepositoryInterface $customerRepository
     */
    public function __construct(
        SubscriberFactory $subscriberFactory,
        ScopeConfigInterface $scopeConfig,
        CustomerAccountManagement $customerAccountManagement,
        NewsletterSubscriptionInterfaceFactory $newsletterSubscriptionFactory,
        SubscriptionManager $subscriptionManager,
        SubscriberResource $subscriberResource,
        StoreResolver $storeResolver,
        EmailAddressValidator $emailAddressValidator,
        OperationStatusInterfaceFactory $operationStatusFactory,
        CustomerRepositoryInterface $customerRepository
    ) {
        $this->subscriberFactory = $subscriberFactory;
        $this->customerAccountManagement = $customerAccountManagement;
        $this->scopeConfig = $scopeConfig;
        $this->newsletterSubscriptionFactory = $newsletterSubscriptionFactory;
        $this->subscriptionManager = $subscriptionManager;
        $this->subscriberResource = $subscriberResource;
        $this->storeResolver = $storeResolver;
        $this->emailAddressValidator = $emailAddressValidator;
        $this->operationStatusFactory = $operationStatusFactory;
        $this->customerRepository = $customerRepository;
    }

    /**
     * @inheritdoc
     */
    public function getSubscriptionByCustomerId(int $customerId, int $storeId = null): NewsletterSubscriptionInterface
    {
        $subscriberId = 0;
        $subscriberEmail = '';
        $subscriberStatus = Subscriber::STATUS_UNSUBSCRIBED;
        $subscriberResponse = $this->newsletterSubscriptionFactory->create();
        $subscriberResponse->setSubscriberId($subscriberId)
            ->setEmail($subscriberEmail)
            ->setStatus($subscriberStatus);

        $store = $this->storeResolver->resolve($storeId);
        $data = $this->subscriberResource->loadByCustomerId($customerId, (int) $store->getWebsiteId());
        $subscriber = $this->subscriberFactory->create(['data' => $data]);

        try {
            if ($subscriber->getId()) {
                $subscriberResponse->setSubscriberId($subscriber->getId())
                    ->setEmail($subscriber->getEmail())
                    ->setStatus($subscriber->getStatus());
            }
        } catch (Exception $exception) {

        }
        return $subscriberResponse;
    }

    /**
     * @inheritdoc
     */
    public function subscribeByCustomerId(int $customerId, int $storeId = null): OperationStatusInterface
    {
        $success = false;
        $store = $this->storeResolver->resolve($storeId);
        try {
            $subscriber = $this->subscriptionManager->subscribeCustomer($customerId, (int) $store->getId());
            $message = $this->getSubscriptionMessage($subscriber->getStatus());
            $success = true;
        } catch (Exception $exception) {
            $message = $this->handleException($exception);
        }
        return $this->getResponseData($success, $message);
    }

    /**
     * @inheritdoc
     */
    public function unsubscribeByCustomerId(int $customerId, int $storeId = null): OperationStatusInterface
    {
        $message = '';
        $success = false;
        $store = $this->storeResolver->resolve($storeId);
        try {
            $subscriber = $this->subscriptionManager->unsubscribeCustomer($customerId, (int) $store->getId());
            if ($subscriber->getStatus() == Subscriber::STATUS_UNSUBSCRIBED) {
                $message = __('You have been unsubscribed from the newsletter.');
            }
            $success = true;
        } catch (Exception $exception) {
            $message = $this->handleException($exception);
        }
        return $this->getResponseData($success, $message);
    }

    /**
     * @inheritdoc
     */
    public function subscribeByCustomerEmail(string $email, int $storeId = null): OperationStatusInterface
    {
        try {
            $success = false;
            $store = $this->storeResolver->resolve($storeId);

            $this->validateEmail($email);
            $this->validateGuestSubscription();
            $this->validateEmailAvailable($email, (int) $store->getId());
            $this->checkIfCustomerExists($email, $storeId);

            $data = $this->subscriberResource->loadBySubscriberEmail($email, (int) $store->getWebsiteId());
            $subscriber = $this->subscriberFactory->create();
            $subscriber->setData($data);
            if ($subscriber->getId() && $subscriber->getStatus() == Subscriber::STATUS_SUBSCRIBED) {
                throw new LocalizedException(
                    __('This email address is already subscribed.')
                );
            }

            $subscriber = $this->subscriptionManager->subscribe($email, (int) $store->getId());
            $message = $this->getSubscriptionMessage((int) $subscriber->getStatus());
            $success = true;
        } catch (LocalizedException $exception) {
            $message = $this->handleException($exception);
        }
        return $this->getResponseData($success, $message);
    }

    /**
     * @inheritdoc
     */
    public function unsubscribeByCustomerEmail(string $email, int $storeId = null): OperationStatusInterface
    {
        try {
            $success = false;
            $store = $this->storeResolver->resolve($storeId);

            $this->validateEmail($email);
            $this->validateGuestSubscription();
            $this->validateEmailAvailable($email, (int) $store->getId());
            $this->checkIfCustomerExists($email, $storeId);

            $data = $this->subscriberResource->loadBySubscriberEmail($email, (int) $store->getWebsiteId());
            $subscriber = $this->subscriberFactory->create();
            $subscriber->setData($data);

            $subscriber = $this->subscriptionManager
                ->unsubscribe($email, (int) $store->getId(), $subscriber->getSubscriberConfirmCode());
            $message = $this->getSubscriptionMessage((int) $subscriber->getStatus());
            $success = true;
        } catch (LocalizedException $exception) {
            $message = $this->handleException($exception);
        }
        return $this->getResponseData($success, $message);
    }

    /**
     * @param string $email
     * @param int|null $storeId
     *
     * @throws LocalizedException
     */
    private function checkIfCustomerExists(string $email, int $storeId = null)
    {
        $store = $this->storeResolver->resolve($storeId);
        try {
            if ($this->customerRepository->get($email, $store->getWebsiteId())) {
                /**
                 * Customers with accounts in Magento must not unsubscribe through guest endpoint.
                 * Use the customer endpoint by generating a customer token or an admin one.
                 */
                throw new LocalizedException(
                    __('This account cannot be subscribed or unsubscribed at this moment.')
                );
            }
        } catch (NoSuchEntityException $exception) {
            /**
             * The customer doesn't have an account.
             * Proceed with the unsubscription.
             */
        }
    }

    /**
     * Validates that the email address isn't being used by a different account.
     *
     * @param string $email
     * @param int $storeId
     *
     * @return void
     * @throws LocalizedException
     * @throws NoSuchEntityException
     */
    protected function validateEmailAvailable(string $email, int $storeId)
    {
        $websiteId = (int) $this->storeResolver->resolve($storeId)->getWebsiteId();
        if (!$this->customerAccountManagement->isEmailAvailable($email, $websiteId)) {
            throw new LocalizedException(
                __('Please try after login to your account.')
            );
        }
    }

    /**
     * Validates the format of the email address
     *
     * @param string $email
     * @return void
     * @throws LocalizedException
     */
    protected function validateEmail(string $email)
    {
        if (!$this->emailAddressValidator->isValid($email)) {
            throw new LocalizedException(__('Please enter a valid email address.'));
        }
    }

    /**
     * Validates if guest can subscribe to a newsletter.
     *
     * @param int|null $storeId
     *
     * @return void
     * @throws LocalizedException
     */
    protected function validateGuestSubscription(int $storeId = null)
    {
        $configValue = $this->scopeConfig->isSetFlag(
            Subscriber::XML_PATH_ALLOW_GUEST_SUBSCRIBE_FLAG,
            ScopeInterface::SCOPE_STORE,
            $storeId
        );
        if ($configValue !== true) {
            throw new LocalizedException(
                __('Create an account and try again')
            );
        }
    }

    /**
     * Get response object
     *
     * @param bool $success
     * @param string $message
     *
     * @return OperationStatusInterface
     */
    private function getResponseData(bool $success, string $message): OperationStatusInterface
    {
        $result = $this->operationStatusFactory->create();
        $result->setSuccess($success)
            ->setMessage($message);
        return $result;
    }

    /**
     * Get message from exception
     *
     * @param Exception $exception
     * @return string
     */
    private function handleException(Exception $exception): string
    {
        return (string) __('There was a problem with the subscription: %1', $exception->getMessage());
    }

    /**
     * Get successful subscription message
     *
     * @param int $status
     * @return string
     */
    private function getSubscriptionMessage(int $status): string
    {
        if ($status == Subscriber::STATUS_NOT_ACTIVE) {
            $message = __('The confirmation request has been sent.');
        } else if ($status == Subscriber::STATUS_UNSUBSCRIBED) {
            $message = __('You have been unsubscribed from the newsletter.');
        } else {
            $message = __('Thank you for your subscription.');
        }
        return (string) $message;
    }
}
