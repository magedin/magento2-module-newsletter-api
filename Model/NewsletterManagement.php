<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2021 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

namespace MagedIn\NewsletterApi\Model;

use Exception;
use Magento\Customer\Api\AccountManagementInterface as CustomerAccountManagement;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Phrase;
use Magento\Framework\Validator\EmailAddress;
use Magento\Newsletter\Model\Subscriber;
use Magento\Newsletter\Model\SubscriberFactory;
use Magento\Store\Model\ScopeInterface;
use Magento\Store\Model\StoreManagerInterface;
use MagedIn\NewsletterApi\Api\Data\NewsletterSubscriptionInterfaceFactory;
use MagedIn\NewsletterApi\Api\NewsletterManagementInterface;
use Magento\Framework\DataObject;
use Zend_Validate;

/**
 * Class NewsletterManagement
 *
 * Newsletter Management for guest and customer
 */
class NewsletterManagement implements NewsletterManagementInterface
{
    /**
     * @var SubscriberFactory
     */
    private $subscriberFactory;

    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @var CustomerAccountManagement
     */
    private $customerAccountManagement;

    /**
     * @var ScopeConfigInterface
     */
    private $scopeConfig;

    /**
     * @var NewsletterSubscriptionInterfaceFactory
     */
    private $newsletterSubscriptionFactory;

    /**
     * NewsletterManagement constructor.
     * @param SubscriberFactory $subscriberFactory
     * @param StoreManagerInterface $storeManager
     * @param ScopeConfigInterface $scopeConfig
     * @param CustomerAccountManagement $customerAccountManagement
     * @param NewsletterSubscriptionInterfaceFactory $newsletterSubscriptionFactory
     */
    public function __construct(
        SubscriberFactory $subscriberFactory,
        StoreManagerInterface $storeManager,
        ScopeConfigInterface $scopeConfig,
        CustomerAccountManagement $customerAccountManagement,
        NewsletterSubscriptionInterfaceFactory $newsletterSubscriptionFactory
    ) {
        $this->subscriberFactory = $subscriberFactory;
        $this->storeManager = $storeManager;
        $this->customerAccountManagement = $customerAccountManagement;
        $this->scopeConfig = $scopeConfig;
        $this->newsletterSubscriptionFactory = $newsletterSubscriptionFactory;
    }

    /**
     * @inheritdoc
     */
    public function getSubscriptionForCustomer($customerId)
    {
        $subscriberId = 0;
        $subscriberEmail = '';
        $subscriberStatus = Subscriber::STATUS_UNSUBSCRIBED;
        $subscriberResponse = $this->newsletterSubscriptionFactory->create();
        try {
            $subscriber = $this->subscriberFactory->create()->loadByCustomerId($customerId);
            if ($subscriber->getId()) {
                $subscriberResponse->setId($subscriber->getId())
                    ->setEmail($subscriber->getEmail())
                    ->setStatus($subscriber->getStatus());
            } else {
                // if not found any data on subscription
                $subscriberResponse->setId($subscriberId)
                    ->setEmail($subscriberEmail)
                    ->setStatus($subscriberStatus);
            }
        } catch (Exception $exception) {
            $subscriberResponse->setId($subscriberId)
                ->setEmail($subscriberEmail)
                ->setStatus($subscriberStatus);
        }

        return $subscriberResponse;
    }

    /**
     * @inheritdoc
     */
    public function subscribeCustomer($customerId)
    {
        $success = false;
        try {
            $subscriber = $this->subscriberFactory->create()->subscribeCustomerById($customerId);
            $message = $this->getSubscriptionMessage($subscriber->getStatus());
            $success = true;
        } catch (Exception $exception) {
            $message = $this->handleException($exception);
        }

        return $this->getResponseData($success, $message);
    }

    /**
     * @inheritdoc
     */
    public function unsubscribeCustomer($customerId)
    {
        $message = '';
        $success = false;
        try {
            $subscriber = $this->subscriberFactory->create()->unsubscribeCustomerById($customerId);

            if ($subscriber->getStatus() == Subscriber::STATUS_UNSUBSCRIBED) {
                $message = __('You have been unsubscribed from the newsletter.');
            }
            $success = true;
        } catch (Exception $exception) {
            $message = $this->handleException($exception);
        }

        return $this->getResponseData($success, $message);
    }

    /**
     * @inheritdoc
     */
    public function subscribe($email)
    {
        $success = false;

        try {
            $this->validateEmailFormat($email);
            $this->validateGuestSubscription();
            $this->validateEmailAvailable($email);

            $subscriber = $this->subscriberFactory->create()->loadByEmail($email);
            if ($subscriber->getId()
                && $subscriber->getStatus() == Subscriber::STATUS_SUBSCRIBED) {
                throw new LocalizedException(
                    __('This email address is already subscribed.')
                );
            }

            $status = $this->subscriberFactory->create()->subscribe($email);
            $message = $this->getSubscriptionMessage($status);
            $success = true;
        } catch (Exception $exception) {
            $message = $this->handleException($exception);
        }

        return $this->getResponseData($success, $message);
    }

    /**
     * Validates that the email address isn't being used by a different account.
     *
     * @param string $email
     * @return void
     * @throws LocalizedException
     */
    protected function validateEmailAvailable(string $email)
    {
        $websiteId = $this->storeManager->getStore()->getWebsiteId();
        if (!$this->customerAccountManagement->isEmailAvailable($email, $websiteId)) {
            throw new LocalizedException(
                __('Please try after login to your account.')
            );
        }
    }

    /**
     * Validates the format of the email address
     *
     * @param string $email
     * @return void
     * @throws LocalizedException
     * @throws \Zend_Validate_Exception
     */
    protected function validateEmailFormat(string $email)
    {
        if (!Zend_Validate::is($email, EmailAddress::class)) {
            throw new LocalizedException(__('Please enter a valid email address.'));
        }
    }

    /**
     * Validates if guest can subscribe to a newsletter.
     *
     * @return void
     * @throws LocalizedException
     */
    protected function validateGuestSubscription()
    {
        if ($this->scopeConfig->getValue(
                Subscriber::XML_PATH_ALLOW_GUEST_SUBSCRIBE_FLAG,
                ScopeInterface::SCOPE_STORE
            ) != 1) {
            throw new LocalizedException(
                __('Create an account and try again')
            );
        }
    }

    /**
     * Get response object
     *
     * @param bool $success
     * @param string $message
     * @return DataObject
     */
    private function getResponseData(bool $success, string $message)
    {
        $data = array(
            'success' => $success,
            'message' => $message,
        );

        $result = new DataObject();
        $result->setData($data);
        return $result;
    }

    /**
     * Get message from exception
     *
     * @param Exception $exception
     * @return Phrase
     */
    private function handleException(Exception $exception)
    {
        return __('There was a problem with the subscription: %1', $exception->getMessage());
    }

    /**
     * Get successful subscription message
     *
     * @param int $status
     * @return Phrase
     */
    private function getSubscriptionMessage(int $status)
    {
        if ($status == Subscriber::STATUS_NOT_ACTIVE) {
            $message = __('The confirmation request has been sent.');
        } else {
            $message = __('Thank you for your subscription.');
        }
        return $message;
    }
}
